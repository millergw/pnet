# Script to run Marc Glettig's P-NET on prostate germline and/or somatic data
# Author: Gwen Miller
# Generated by copying over and then editing everything in the file: `pnet/notebooks/prostate_metastatic_prediction_example.ipynb`

import os
import sys

####### TODO: figure out module importing 
import pnet_loader
import util
import ReactomeNetwork # this loads
import Pnet # this fails to load bc of how it imports ReactomeNetwork...

# Gwen's scripts
import data_manipulation
import vcf_manipulation
import prostate_data_loaders
import report_and_eval

import wandb
import pandas as pd
import numpy as np
import torch
import matplotlib.pyplot as plt


# Importing packages related to model performance
from sklearn.metrics import confusion_matrix # expects true_labels, predicted_labels
from sklearn.metrics import classification_report # expects true_labels, predicted_labels
from sklearn.metrics import roc_auc_score # expects true_labels, predicted_probs

import logging
logging.basicConfig(
            filename='run_pnet.log', 
            encoding='utf-8',
            format='%(asctime)s %(levelname)-8s %(message)s',
            level=logging.INFO,
            datefmt='%Y-%m-%d %H:%M:%S')

logger = logging.getLogger()
logger.setLevel(logging.INFO)


mutations_dict = {"3'Flank": 'Silent',
                  "5'Flank": 'Silent',
                  "5'UTR": 'Silent',
                  "3'UTR": 'Silent',
                  "IGR": 'Silent',
                  "Intron": 'Silent',
                  "lincRNA": 'Silent',
                  "RNA": 'Silent',
                  "Silent": 'Silent',
                  "non_coding_transcript_exon": 'Silent',
                  "upstream_gene": 'Silent',
                  "Splice_Region": 'Silent',
                  "Targeted_Region": 'Silent',
                  'Splice_Site': 'LOF',
                  'Nonsense_Mutation': 'LOF',
                  'Frame_Shift_Del': 'LOF',
                  'Frame_Shift_Ins': 'LOF',
                  'Stop_Codon_Del': 'LOF',
                  'Stop_Codon_Ins': 'LOF',
                  'Nonstop_Mutation': 'LOF',
                  'Start_Codon_Del': 'LOF',
                  'Missense_Mutation': 'Other_nonsynonymous',
                  'In_Frame_Del': 'Other_nonsynonymous',
                  'In_Frame_Ins': 'Other_nonsynonymous',
                  'De_novo_Start_InFrame': 'Other_nonsynonymous',
                  'De_novo_Start_OutOfFrame': 'Other_nonsynonymous',
                  'Start_Codon_Ins': 'Other_nonsynonymous'
                  }


def main():
    """
    Here, we generate the various datasets of interest for the exploration of germline-somatic interactions in prostate cancer.
    Notably, this includes many decisions about how to filter the germline dataset. This includes:
     1. which variants (pathogenic only? how stringent of filters?) to keep
     2. which genes to keep (known cancer-promoting? known prostate-cancer-promoting? all?), 
     2. whether to collapse to gene-level (BRCA2, BRCA1) or keep more fine-grained information (BRCA2_missense, BRCA2_silent)
    """
    wandb.login()
    wandb.init(
        # Set the project where this run will be logged
        project="prostate_met_status",
        name="data_making_1"
    )


    SAVE_DIR = '"../../pnet_germline/data"
    report_and_eval.make_dir_if_needed(SAVE_DIR)

    
    logging.debug("Defining paths for germline data")
    GERMLINE_DATADIR = "../../pnet_germline/data/"
    # germline_vars_f = os.path.join(GERMLINE_DATADIR, "prostate/prostate_germline_vcf_subset_to_germline_tier_1and2_pathogenic_vars_only.txt")
    germline_vars_f = os.path.join(GERMLINE_DATADIR, "prostate/prostate_germline_vcf_subset_to_germline_tier_12_and_somatic_pathogenic_vars_only.txt")

    logging.debug("Defining paths for the sample metadata")
    id_map_f = os.path.join(GERMLINE_DATADIR, "prostate/germline_somatic_id_map_outer_join.csv") # germline_somatic_id_map_f
    sample_metadata_f = os.path.join(GERMLINE_DATADIR,"prostate/pathogenic_variants_with_clinical_annotation_1341_aug2021_correlation.csv")

    # TODO: need more flexibility in how we filter out variants, etc. Might need a separate file for pre-processing the germline VCF.
    germline_mut = prostate_data_loaders.get_germline_mutation(germline_vars_f)  


    logging.info("Defining the hyperparameters of the dataset generation")
    hparams={
        'verbose':True,
        'zero_impute_germline':ZERO_IMPUTE_GERMLINE,
        'zero_impute_somatic':ZERO_IMPUTE_SOMATIC,    
        'restricted_to_pairs':USE_ONLY_PAIRED,
    }
    
    
    logging.info("ending wandb run")
    wandb.finish()
    return


if __name__=="__main__":
    main()